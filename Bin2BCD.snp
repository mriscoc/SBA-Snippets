-- /SBA: Program Details --===================================================--
-- Snippet: 16 bit Binary to BCD converter
-- Version: 0.1
-- Date: 2016/12/28
-- Author: Miguel A. Risco-Castillo
-- Description: 16 bit to BCD converter using "Double Dabble" algorithm.
-- Before call you must fill "bin_in" with the appropriate value, after called,
-- the snippet put into the variable "bcd_out" the BCD result of the conversion.
-- Put the snippet in the routines section of the user program.
-- /SBA: End Program Details ---------------------------------------------------

-- /SBA: User Registers and Constants --======================================--
  variable bin_in  : unsigned(15 downto 0);      -- 16 bit input register
  variable bcd_out : unsigned(19 downto 0);      -- 20 bit output register
-- /SBA: End User Registers and Constants --------------------------------------

-- /SBA: User Program --======================================================--
-- /L:Bin2BCD
=> bcd_out := (others=>'0');
   if bin_in=0 then SBARet; end if;
=> bcd_out(2 downto 0) := bin_in(15 downto 13); -- shl 3
   bin_in := bin_in(12 downto 0) & "000";
=> for j in 0 to 12 loop
     for i in 0 to 3 loop -- for nibble 0 to 3
       if bcd_out(3+4*i downto 4*i)>4 then -- is nibble > 4?
         bcd_out(3+4*i downto 4*i):=bcd_out(3+4*i downto 4*i)+3; -- add 3 to nibble
       end if;
     end loop; -- last nibble do not need adjust (65535)
     bcd_out := bcd_out(18 downto 0) & bin_in(15); --shl
     bin_in := bin_in(14 downto 0) & '0';
   end loop;
   SBARet;
-- /SBA: End User Program ------------------------------------------------------
